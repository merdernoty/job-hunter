name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env: 
  GO_VERSION: '1.25.1'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Verify dependencies
      run: |
        go mod verify
        go mod tidy
        git diff --exit-code go.mod go.sum

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: v2.5.0
        args: --timeout=5m

    - name: Run tests
      run: |
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html

    - name: Check test coverage
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
        echo "Coverage: $COVERAGE%"
        echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ github.sha }}
        path: |
          coverage.out
          coverage.html
        retention-days: 7

  build:
    needs: lint-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-,suffix=-{{date 'YYYYMMDD-HHmmss'}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDTIME=${{ github.event.head_commit.timestamp }}
          VERSION=${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          if docker ps | grep -q job-hunter-api; then
            docker exec job-hunter-db pg_dump -U $POSTGRES_USER $POSTGRES_DBNAME > /opt/job-hunter/backup/backup_$(date +%Y%m%d_%H%M%S).sql || echo "Бэкап не удался"
          fi
          
          docker stop job-hunter-api || true
          docker rm job-hunter-api || true
          
          docker image prune -f
          
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          docker pull ${{ needs.build.outputs.image-tag }}
          
          docker run -d \
            --name job-hunter-api \
            --restart unless-stopped \
            -p 8080:8080 \
            --env-file /opt/job-hunter/.env \
            --network job-hunter-network \
            ${{ needs.build.outputs.image-tag }}
          
          sleep 20
          
          if docker ps | grep job-hunter-api; then
          else
            docker logs job-hunter-api
            exit 1
          fi
          
          for i in {1..5}; do
            if curl -f http://localhost:8080/api/health; then
              exit 0
            fi
            sleep 10
          done
          
          docker logs job-hunter-api
          exit 1